.global imagen_actual_calculadora
.global seteo_calculadora
.global main_calculadora
.data
.align 2
msg_stack: .asciiz "stack:"
.align 2
msg_entrada: .asciiz "entrada:"
.align 2
titulo_calculadora: .asciiz "calculadora rpn"
.align 2
msg_cana: .asciiz "cana chupa pija"
.align 2
imagen_actual_calculadora: .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
# 68, 108, 56, 16, 56, 108, 68, 0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 68, 108, 56, 16, 56, 108, 68, 0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 68, 108, 56, 16, 56, 108, 68, 0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,68, 108, 56, 16, 56, 108, 68, 0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,68, 108, 56, 16, 56, 108, 68, 0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,68, 108, 56, 16, 56, 108, 68, 0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,68, 108, 56, 16, 56, 108, 68, 0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,68, 108, 56, 16, 56, 108, 68, 0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
.align 2
renglon_1_calcu: .word 0
renglon_2_calcu: .word 0
renglon_3_calcu: .word 0
renglon_4_calcu: .word 0
renglon_5_calcu: .word 0
renglon_6_calcu: .word 0
renglon_7_calcu: .word 0
renglon_8_calcu: .word 0
input_de_numeros: .space 4	    # Espacio para que usuario ingrese datos

# -------------------------------------------MAIN-------------------------------------------------------

# imprimir stack --> stack: y lo que hay en el stack
# limpiar pantalla --> pone tood en la imagen vacia
# imprimir input --> entrada: todo lo que hay en el input
.text
seteo_calculadora:
    la $t0, stack
    sw $t0, puntero
    li $t0, 0
    li $t1,1
    sw $t0, input_de_numeros
    sb $t0, cantidad
    sb $t1, operacion

    la $t0, imagen_actual_calculadora
    
    sw $t0, renglon_1_calcu
    
    addi $t0, $t0, 128
    sw $t0, renglon_2_calcu
    
    addi $t0, $t0, 128
    sw $t0, renglon_3_calcu
    
    addi $t0, $t0, 128
    sw $t0, renglon_4_calcu
    
    addi $t0, $t0, 128
    sw $t0, renglon_5_calcu
    
    addi $t0, $t0, 128
    sw $t0, renglon_6_calcu
    
    addi $t0, $t0, 128
    sw $t0, renglon_7_calcu
    
    addi $t0, $t0, 128
    sw $t0, renglon_8_calcu
    
    jr $ra
    
    
main_calculadora:
    # Guardo el STACK
    addiu $sp, $sp, -12
    sw $ra, ($sp)
    sw $s1, 4($sp)
    sw $s2, 8($sp)
    # ---------------
    # imprimir el titulo en el primer renglon
    la $a0, titulo_calculadora
    la $a1, renglon_1_calcu
    li $a2, 15
    jal imprimir_carteles
    
    # imprimir stack: en el renglon 3
    la $a0, msg_stack
    la $a1, renglon_3_calcu
    li $a2, 6
    jal imprimir_carteles
    
    # imprimir entrada: en el renglon 6
    la $a0, msg_entrada
    la $a1, renglon_6_calcu
    li $a2, 8
    jal imprimir_carteles
    
    # imprimir entrada: en el renglon 6
    la $a0, msg_cana
    la $a1, renglon_8_calcu
    li $a2, 15
    jal imprimir_carteles
   
    la $a0, imagen_actual_calculadora
    jal cargar_imagen
    leer_nueva_entrada:
        li $s1, 0 # Largo actual de la entrada en input
        la $s2, input_de_numeros
        loop_leer_entrada:
            li $a0, 0
            jal leer_teclado
            jal esperar_debounce
            beq $v0, 'd', final_lectura_numero
            beq $v0, '#', eliminar_ultimo_numero
            beq $v0, '*', cambiar_operacion
            beq $v0, 'a', fin_calculadora
            # Guarda en input el nuevo numero
            sb $v0, ($s2)
            addi $s1, $s1, 1 # Lleva la cuenta de la cantidad de numero que hay en el input
            addi $s2, $s2, 1
            move $a0, $s1 # Paso como parametro la cantidad de numero que hay en el input
            jal imprimir_input
            beq $s1, 4, final_lectura_numero
            j loop_leer_entrada
        final_lectura_numero:
            jal procesar_entrada
            beq $v1, 1 , entrada_invalida # -----> Mostrar en pantalla "entrada invalida" y vuelvo a loop leer entrada<------
            move $a0, $v0
            jal guardar
            j leer_nueva_entrada
    fin_calculadora:
        # Devuelvo el STACK
        lw $ra, ($sp)
        lw $s1, 4($sp)
        lw $s2, 8($sp)
        addiu $sp, $sp, 12
        # ---------------
        jr $ra
            

# Elimina el ultimo digito ingresado en input
    eliminar_ultimo_numero:
        la $t0, input_de_numeros
        lb $t1, ($t0)
        beq $t1, 0, fin_eliminar_ultimo_numero
        loop_eliminar_ultimo_numero:
            addi $t0, $t0, 1
            lb $t1, ($t0)
            beq $t1, 0, eliminar_numero
            j loop_eliminar_ultimo_numero
        eliminar_numero:
            addi $t0, $t0, -1
            sb $0, ($t0)
        fin_eliminar_ultimo_numero:
            j loop_leer_entrada
    
# Evaluo si cambia de operacion, 0 -> no hay operacion, 1 -> suma, 2 -> resta, 3 -> multiplicacion, 4 -> potencia
    cambiar_operacion:    
        li $a0, 0
        jal leer_teclado
	    jal esperar_debounce
        beq $v0, 'd', final_cambio_operacion
        beq $v0, '*', siguiente_operacion
         j entrada_invalida

        siguiente_operacion:
	    la $t0, operacion
	    lb $t1, ($t0)
            addi $t1, $t1, 1
            beq $t1, 5, resetear_operacion
            sb $t1, ($t0)
            j cambiar_operacion
        
	    resetear_operacion:
            li $t1, 0
            sb $t1, ($t0)
            j cambiar_operacion

        final_cambio_operacion:
            la $t0, operacion
            lb $t1, ($t0)
	        # Limpio la operacion
            li $t2, 1
	        sb $t2, ($t0)
	        # ------------
            beq $t1, 0, leer_nueva_entrada
            beq $t1, 1, sumar
            beq $t1, 2, restar
            beq $t1, 3, multiplicar
            beq $t1, 4, potencia

# --------------------------------------------------------------------------------------------------------

# ----------------------------------------METODOS TAD STACK-----------------------------------------------

# Imprime en consola todos los numeros del stack, recibe en $a0 la cantidad de numero que hay
imprimir_input:
    # CUIDO EL STACK
    addiu $sp, $sp, -20
    sw $ra, ($sp)
    sw $s0, 4($sp)
    sw $s1, 8($sp)
    sw $s2, 12($sp)
    sw $s3, 16($sp)
    # ----------------
    # Limpio el renglon 5 donde voy a escribir los numeros
    move $s3, $a0 # me guardo en $s3 la cantidad de numeros que hay en el input
    la $a0, renglon_5_calcu
    jal limpiar_renglon

    li $s2, 0 # contador de la cantidad de chars que voy cargando
    lw $s0, renglon_5_calcu
    la $s1, input_de_numeros
    loop_imprimir_input:
        lb $a0, ($s1)
        jal de_char_a_imagen
        move $t2, $v0   # Ahora en $t2 tengo el address de memoria a la imagen del char que tengo que cargar
        li $t1, 0
        loop_cargar_numero_a_imagen_actual:
            lb $t0, ($t2)   # Cargo el byte de la imagen
            sb $t0, ($s0)   # La guardo en la imagen actual, el renglon 5
            addi $t2, $t2, 1
            addi $s0, $s0, 1
            addi $t1, $t1, 1 # Llevo la cuenta de la cantidad de bytes que voy guardando, como es un caracter tienen que ser 8
            beq $t1, 8, fin_cargar_numero_a_imagen_actual # Si ya cargue los 8 bytes de la imagen paso a la siguiente
            j loop_cargar_numero_a_imagen_actual
        fin_cargar_numero_a_imagen_actual:
            addi $s1, $s1, 1 # Paso al siguiente char que tengo que cargar
            addi $s2, $s2, 1 # Agrego uno a la cantidad de chars que voy cargando
            beq $s2, $s3, fin_imprimir_input # Si ya cargue todos los numeros que tengo que cargar termino
            j loop_imprimir_input
    
    fin_imprimir_input:
        la $a0, imagen_actual_calculadora
        jal cargar_imagen
        # DEVUELVO EL STACK
        lw $ra, ($sp)
        lw $s0, 4($sp)
        lw $s1, 8($sp)
        lw $s2, 12($sp)
        lw $s3, 16($sp)
        addiu $sp, $sp, 20
        # ---------------
        jr $ra

# Imprime el mensaje que este en el address $a0, en el renglon que se envia en $a1 como address que tiene un numero x de caracteres dado en $a2
imprimir_carteles:
    # CUIDO EL STACK
    addiu $sp, $sp, -20
    sw $ra, ($sp)
    sw $s0, 4($sp)
    sw $s1, 8($sp)
    sw $s2, 12($sp)
    sw $s3, 16($sp)
    # ----------------

    li $s2, 0 # contador de la cantidad de chars que voy cargando
    lw $s0, ($a1)
    move $s1, $a0
    move $s3, $a2
    loop_imprimir_letrero_stack:
        lb $a0, ($s1)
        jal de_char_a_imagen
        move $t2, $v0   # Ahora en $t2 tengo el address de memoria a la imagen del char que tengo que cargar
        li $t1, 0
        loop_cargar_char_stack:
            lb $t0, ($t2)   # Cargo el byte de la imagen
            sb $t0, ($s0)   # La guardo en la imagen actual, el renglon 1
            addi $t2, $t2, 1
            addi $s0, $s0, 1
            addi $t1, $t1, 1 # Llevo la cuenta de la cantidad de bytes que voy guardando, como es un caracter tienen que ser 8
            beq $t1, 8, fin_cargar_char_stack
            j loop_cargar_char_stack
        fin_cargar_char_stack:
            addi $s1, $s1, 1 # Paso al siguiente char que tengo que cargar
            addi $s2, $s2, 1 # Agrego uno a la cantidad de chars que voy cargando
            beq $s2, $s3, fin_imprimir_input
            j loop_imprimir_letrero_stack
    
    fin_imprimir_letrero_stack:
        la $a0, imagen_actual_calculadora
        jal cargar_imagen
        # DEVUELVO EL STACK
        lw $ra, ($sp)
        lw $s0, 4($sp)
        lw $s1, 8($sp)
        lw $s2, 12($sp)
	lw $s3, 16($sp)
        addiu $sp, $sp, 20
        # ---------------
        jr $ra


imprimir_letrero_entrada:
    # CUIDO EL STACK
    addiu $sp, $sp, -16
    sw $ra, ($sp)
    sw $s0, 4($sp)
    sw $s1, 8($sp)
    sw $s2, 12($sp)
    # ----------------

    li $s2, 0 # contador de la cantidad de chars que voy cargando
    lw $s0, renglon_4_calcu
    la $s1, msg_entrada # "entrada:"
    loop_imprimir_letrero_entrada:
        lb $a0, ($s1)
        jal de_char_a_imagen
        move $t2, $v0   # Ahora en $t2 tengo el address de memoria a la imagen del char que tengo que cargar
        li $t1, 0
        loop_cargar_char_entrada:
            lb $t0, ($t2)   # Cargo el byte de la imagen
            sb $t0, ($s0)   # La guardo en la imagen actual, el renglon 1
            addi $t2, $t2, 1
            addi $s0, $s0, 1
            addi $t1, $t1, 1 # Llevo la cuenta de la cantidad de bytes que voy guardando, como es un caracter tienen que ser 8
            beq $t1, 8, fin_cargar_char_entrada
            j loop_cargar_char_entrada
        fin_cargar_char_entrada:
            addi $s1, $s1, 1 # Paso al siguiente char que tengo que cargar
            addi $s2, $s2, 1 # Agrego uno a la cantidad de chars que voy cargando
            beq $s2, 8, fin_imprimir_letrero_entrada
            j loop_imprimir_letrero_entrada
    
    fin_imprimir_letrero_entrada:
        la $a0, imagen_actual_calculadora
        jal cargar_imagen
        # DEVUELVO EL STACK
        lw $ra, ($sp)
        lw $s0, 4($sp)
        lw $s1, 8($sp)
        lw $s2, 12($sp)
        addiu $sp, $sp, 16
        # ---------------
        jr $ra


limpiar_renglon:
    # limpiar el renglon que pasan en $a0
    li $t0, 0
    loop_limpiar_renglon:
        sb $0, ($a0)
        addi $a0, $a0, 1
        addi $t0, $t0, 1
        beq $t0, 128, fin_limpiar_renglon
        j loop_limpiar_renglon
    fin_limpiar_renglon:
    jr $ra

# Saca dos numeros desde el address $s0 y los guarda en $v0 y $v1
sacar:
    lb $t0, cantidad		# En $t0 guardo la cantidad de elementos en el stack
    la $t1, puntero
    lw $t1, ($t1)			# En $t1 guardo el puntero al primer espacio vacio
    blt $t0, 2, operandos_insuficientes
    addi $t0, $t0, -2
    sb $t0, cantidad
    lw $v0, -4($t1)
    lw $v1, -8($t1)
    addi $t1, $t1, -8
    sw $t1, puntero
    jr $ra	

# Guarda el numero que esta en $a0 en el stack	
guardar:
    # CUIDO EL STACK
    addiu $sp, $sp, -4
    sw $ra, ($sp)
    # ---------------
    lb $t0, cantidad				# En $t0 guardo la cantidad de elementos 
    bge $t0, 10, exceso_operandos
    la $t1, puntero	
    lw $t1, ($t1)					# En t1 es ahora el puntero al primer espacio vacio
    sw $a0, ($t1)
    addi $t0, $t0, 1
    sb $t0, cantidad
    addi $t1, $t1, 4
    sw $t1, puntero
    j fin_guardado
    exceso_operandos:
	# li $v0, 4
	# la $a0, msj_exceso_operandos  ----------> FUNCION PANTALLA <-----------
	# syscall 54
    fin_guardado:
	li $t0, 0
	lw $t0, input_de_numeros
    # DEVUELVO EL STACK
    lw $ra, ($sp)
    addiu $sp, $sp, 4
    # ---------------
	jr $ra

# --------------------------------------------------------------------------------------------------------

# Lee la entrada, pasa cada caracter a un valor de entero y devuelve en $v0 este valor y en $v1 0 si la entrada es correcta, 1 si no lo es
procesar_entrada:
    li $t7, 1			# Multiplicador por unidades, decenas, centenas y miles
    la $t6, input_de_numeros		# Puntero al los datos que ingreso el usuario
    addi $t6, $t6, 3		# Comienzo desde las unidades
    li $t0, 0			# Lleva la cuenta total
    li $t2, 4			# Lleva la posicion
    li $v1, 0			# Flag si la entrada es invalida
    li $t9, 10

    loop_procesamiento:
	    beqz $t2, fin_procesamiento

	    lb $t1, ($t6)
	    beq $t1, 0, nulo
	    beq $t1, 0xa, nulo

	    addi $t1, $t1, -48
	    bltz $t1, no_valido
	    bgt $t1, 9, no_valido

	    multu $t1, $t7
	    mflo $t1
	    multu $t7, $t9
	    mflo $t7
	    add $t0, $t0, $t1
	    nulo:
	    addi $t6, $t6, -1
	    addi $t2, $t2, -1
	    j loop_procesamiento

	    no_valido:
		    li $v1, 1 # Activo el flag de entrada invalida
		    j fin_procesamiento

	    fin_procesamiento:
		    move $v0, $t0			# En $v0 guardo el valor procesado
		    la $t0, input_de_numeros
		    sw $0, ($t0) # Limpio la memoria
		    jr $ra

# --------------------------------------------------------------------------------------------------------




# Imprime en consola el error de entrada invalida
entrada_invalida:
    li $v0, 4
    #la $a0, msj_entrada_invalida
    syscall
    j leer_nueva_entrada

# Imprime en consola el error de operandos insuficientes
operandos_insuficientes:
    li $v0, 4
    #la $a0, msj_operandos_insuficientes
    syscall
    j leer_nueva_entrada

# Saca dos numeros del stack y los resta
restar:
    jal sacar
    sub $a0, $v1, $v0
    jal guardar
    j leer_nueva_entrada

# Saca dos numeros del stack y los suma
sumar:
    jal sacar
    add $a0, $v1, $v0
    jal guardar
    j leer_nueva_entrada

# Saca dos numeros del stack y los multiplica
multiplicar:
    jal sacar
    mult $v1, $v0
    mfhi $t0
    mflo $a0
    jal guardar
    j leer_nueva_entrada

# Saca dos numeros del stack y hace la potencia, el penultimo numero elevado al ultimo numero
potencia:
    jal sacar
    li $t0,1
    beqz $v0,exponente_cero
    bltz $v0,exponente_negativo

    loop_potencia:
    beqz $v0,fin_potencia
    mult $v1,$t0
    mflo $t0
    addi $v0,$v0,-1
    j loop_potencia

    fin_potencia:
    la $a0,($t0)

    volver:
    jal guardar
    j leer_nueva_entrada

    exponente_cero:
    li $a0,1
    j volver
    
    exponente_negativo:
    # Al no realizar la operaci�n debo devolver los elementos que quit� del stack. Estos se encuentran en $v0(�ltimo) y $v1(pen�ltimo).
      la $a0,($v1)
      jal guardar
      la $a0,($v0)
      jal guardar
      
      # MOSTRAR EN PANTALLA QUE NO SE PUEDE REALIZAR LA OPERACION
      j leer_nueva_entrada	

fin:
    li $v0, 10
    syscall



